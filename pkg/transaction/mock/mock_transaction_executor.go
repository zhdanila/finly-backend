// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/transaction/transaction.go
//
// Generated by this command:
//
//	mockgen -source=pkg/transaction/transaction.go -destination=pkg/transaction/mock/mock_transaction_executor.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionExecutor is a mock of TransactionExecutor interface.
type MockTransactionExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionExecutorMockRecorder
	isgomock struct{}
}

// MockTransactionExecutorMockRecorder is the mock recorder for MockTransactionExecutor.
type MockTransactionExecutorMockRecorder struct {
	mock *MockTransactionExecutor
}

// NewMockTransactionExecutor creates a new mock instance.
func NewMockTransactionExecutor(ctrl *gomock.Controller) *MockTransactionExecutor {
	mock := &MockTransactionExecutor{ctrl: ctrl}
	mock.recorder = &MockTransactionExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionExecutor) EXPECT() *MockTransactionExecutorMockRecorder {
	return m.recorder
}

// WithTransaction mocks base method.
func (m *MockTransactionExecutor) WithTransaction(ctx context.Context, db *sqlx.DB, fn func(*sqlx.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, db, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockTransactionExecutorMockRecorder) WithTransaction(ctx, db, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockTransactionExecutor)(nil).WithTransaction), ctx, db, fn)
}
