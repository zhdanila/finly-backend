// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/transaction/transaction.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/transaction/transaction.go -destination=internal/repository/transaction/mock/mock_transaction.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "finly-backend/internal/domain"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
	isgomock struct{}
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// CreateTX mocks base method.
func (m *MockTransaction) CreateTX(ctx context.Context, tx *sqlx.Tx, userID, budgetID, categoryID, transactionType, note string, amount float64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTX", ctx, tx, userID, budgetID, categoryID, transactionType, note, amount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTX indicates an expected call of CreateTX.
func (mr *MockTransactionMockRecorder) CreateTX(ctx, tx, userID, budgetID, categoryID, transactionType, note, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTX", reflect.TypeOf((*MockTransaction)(nil).CreateTX), ctx, tx, userID, budgetID, categoryID, transactionType, note, amount)
}

// DeleteTX mocks base method.
func (m *MockTransaction) DeleteTX(ctx context.Context, tx *sqlx.Tx, transactionID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTX", ctx, tx, transactionID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTX indicates an expected call of DeleteTX.
func (mr *MockTransactionMockRecorder) DeleteTX(ctx, tx, transactionID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTX", reflect.TypeOf((*MockTransaction)(nil).DeleteTX), ctx, tx, transactionID, userID)
}

// GetByID mocks base method.
func (m *MockTransaction) GetByID(ctx context.Context, transactionID, userID string) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, transactionID, userID)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTransactionMockRecorder) GetByID(ctx, transactionID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTransaction)(nil).GetByID), ctx, transactionID, userID)
}

// GetDB mocks base method.
func (m *MockTransaction) GetDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockTransactionMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockTransaction)(nil).GetDB))
}

// List mocks base method.
func (m *MockTransaction) List(ctx context.Context, userID string) ([]*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, userID)
	ret0, _ := ret[0].([]*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTransactionMockRecorder) List(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTransaction)(nil).List), ctx, userID)
}

// UpdateTX mocks base method.
func (m *MockTransaction) UpdateTX(ctx context.Context, tx *sqlx.Tx, transactionID, userID, categoryID, transactionType, note string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTX", ctx, tx, transactionID, userID, categoryID, transactionType, note, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTX indicates an expected call of UpdateTX.
func (mr *MockTransactionMockRecorder) UpdateTX(ctx, tx, transactionID, userID, categoryID, transactionType, note, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTX", reflect.TypeOf((*MockTransaction)(nil).UpdateTX), ctx, tx, transactionID, userID, categoryID, transactionType, note, amount)
}
