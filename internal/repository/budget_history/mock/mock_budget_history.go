// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/budget_history/budget_history.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/budget_history/budget_history.go -destination=internal/repository/budget_history/mock/mock_budget_history.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "finly-backend/internal/domain"
	reflect "reflect"
	time "time"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockBudgetHistory is a mock of BudgetHistory interface.
type MockBudgetHistory struct {
	ctrl     *gomock.Controller
	recorder *MockBudgetHistoryMockRecorder
	isgomock struct{}
}

// MockBudgetHistoryMockRecorder is the mock recorder for MockBudgetHistory.
type MockBudgetHistoryMockRecorder struct {
	mock *MockBudgetHistory
}

// NewMockBudgetHistory creates a new mock instance.
func NewMockBudgetHistory(ctrl *gomock.Controller) *MockBudgetHistory {
	mock := &MockBudgetHistory{ctrl: ctrl}
	mock.recorder = &MockBudgetHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBudgetHistory) EXPECT() *MockBudgetHistoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBudgetHistory) Create(ctx context.Context, budgetID string, amount float64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, budgetID, amount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBudgetHistoryMockRecorder) Create(ctx, budgetID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBudgetHistory)(nil).Create), ctx, budgetID, amount)
}

// CreateInitialTX mocks base method.
func (m *MockBudgetHistory) CreateInitialTX(ctx context.Context, tx *sqlx.Tx, budgetID string, amount float64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInitialTX", ctx, tx, budgetID, amount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInitialTX indicates an expected call of CreateInitialTX.
func (mr *MockBudgetHistoryMockRecorder) CreateInitialTX(ctx, tx, budgetID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInitialTX", reflect.TypeOf((*MockBudgetHistory)(nil).CreateInitialTX), ctx, tx, budgetID, amount)
}

// CreateTX mocks base method.
func (m *MockBudgetHistory) CreateTX(ctx context.Context, tx *sqlx.Tx, budgetID, transactionID string, amount float64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTX", ctx, tx, budgetID, transactionID, amount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTX indicates an expected call of CreateTX.
func (mr *MockBudgetHistoryMockRecorder) CreateTX(ctx, tx, budgetID, transactionID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTX", reflect.TypeOf((*MockBudgetHistory)(nil).CreateTX), ctx, tx, budgetID, transactionID, amount)
}

// GetCurrentBalance mocks base method.
func (m *MockBudgetHistory) GetCurrentBalance(ctx context.Context, budgetID string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBalance", ctx, budgetID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentBalance indicates an expected call of GetCurrentBalance.
func (mr *MockBudgetHistoryMockRecorder) GetCurrentBalance(ctx, budgetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBalance", reflect.TypeOf((*MockBudgetHistory)(nil).GetCurrentBalance), ctx, budgetID)
}

// GetLastByBudgetID mocks base method.
func (m *MockBudgetHistory) GetLastByBudgetID(ctx context.Context, budgetID string) (*domain.BudgetHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastByBudgetID", ctx, budgetID)
	ret0, _ := ret[0].(*domain.BudgetHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastByBudgetID indicates an expected call of GetLastByBudgetID.
func (mr *MockBudgetHistoryMockRecorder) GetLastByBudgetID(ctx, budgetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastByBudgetID", reflect.TypeOf((*MockBudgetHistory)(nil).GetLastByBudgetID), ctx, budgetID)
}

// List mocks base method.
func (m *MockBudgetHistory) List(ctx context.Context, budgetID string) ([]*domain.BudgetHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, budgetID)
	ret0, _ := ret[0].([]*domain.BudgetHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBudgetHistoryMockRecorder) List(ctx, budgetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBudgetHistory)(nil).List), ctx, budgetID)
}

// ListFromDate mocks base method.
func (m *MockBudgetHistory) ListFromDate(ctx context.Context, budgetID string, fromDate time.Time, inclusive bool) ([]*domain.BudgetHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFromDate", ctx, budgetID, fromDate, inclusive)
	ret0, _ := ret[0].([]*domain.BudgetHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFromDate indicates an expected call of ListFromDate.
func (mr *MockBudgetHistoryMockRecorder) ListFromDate(ctx, budgetID, fromDate, inclusive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFromDate", reflect.TypeOf((*MockBudgetHistory)(nil).ListFromDate), ctx, budgetID, fromDate, inclusive)
}

// UpdateBalanceTX mocks base method.
func (m *MockBudgetHistory) UpdateBalanceTX(ctx context.Context, tx *sqlx.Tx, transactionID string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceTX", ctx, tx, transactionID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceTX indicates an expected call of UpdateBalanceTX.
func (mr *MockBudgetHistoryMockRecorder) UpdateBalanceTX(ctx, tx, transactionID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceTX", reflect.TypeOf((*MockBudgetHistory)(nil).UpdateBalanceTX), ctx, tx, transactionID, amount)
}
