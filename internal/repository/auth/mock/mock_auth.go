// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/auth/auth.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/auth/auth.go -destination=internal/repository/auth/mock/mock_auth.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "finly-backend/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
	isgomock struct{}
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// AddTokenToBlacklist mocks base method.
func (m *MockAuth) AddTokenToBlacklist(ctx context.Context, token string, ttlSeconds float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTokenToBlacklist", ctx, token, ttlSeconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTokenToBlacklist indicates an expected call of AddTokenToBlacklist.
func (mr *MockAuthMockRecorder) AddTokenToBlacklist(ctx, token, ttlSeconds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTokenToBlacklist", reflect.TypeOf((*MockAuth)(nil).AddTokenToBlacklist), ctx, token, ttlSeconds)
}

// GetUserByEmail mocks base method.
func (m *MockAuth) GetUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAuthMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAuth)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockAuth) GetUserByID(ctx context.Context, id string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuth)(nil).GetUserByID), ctx, id)
}

// IsTokenBlacklisted mocks base method.
func (m *MockAuth) IsTokenBlacklisted(ctx context.Context, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenBlacklisted", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTokenBlacklisted indicates an expected call of IsTokenBlacklisted.
func (mr *MockAuthMockRecorder) IsTokenBlacklisted(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenBlacklisted", reflect.TypeOf((*MockAuth)(nil).IsTokenBlacklisted), ctx, token)
}

// Register mocks base method.
func (m *MockAuth) Register(ctx context.Context, email, passwordHash, firstName, lastName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, email, passwordHash, firstName, lastName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthMockRecorder) Register(ctx, email, passwordHash, firstName, lastName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuth)(nil).Register), ctx, email, passwordHash, firstName, lastName)
}

// RemoveToken mocks base method.
func (m *MockAuth) RemoveToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveToken indicates an expected call of RemoveToken.
func (mr *MockAuthMockRecorder) RemoveToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveToken", reflect.TypeOf((*MockAuth)(nil).RemoveToken), ctx, token)
}
