// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/budget/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/budget/service.go -destination=internal/service/budget/mock/mock_budget.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	budget "finly-backend/internal/service/budget"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBudget is a mock of Budget interface.
type MockBudget struct {
	ctrl     *gomock.Controller
	recorder *MockBudgetMockRecorder
	isgomock struct{}
}

// MockBudgetMockRecorder is the mock recorder for MockBudget.
type MockBudgetMockRecorder struct {
	mock *MockBudget
}

// NewMockBudget creates a new mock instance.
func NewMockBudget(ctrl *gomock.Controller) *MockBudget {
	mock := &MockBudget{ctrl: ctrl}
	mock.recorder = &MockBudgetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBudget) EXPECT() *MockBudgetMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBudget) Create(ctx context.Context, req *budget.CreateBudgetRequest) (*budget.CreateBudgetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(*budget.CreateBudgetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBudgetMockRecorder) Create(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBudget)(nil).Create), ctx, req)
}

// GetBudgetHistory mocks base method.
func (m *MockBudget) GetBudgetHistory(ctx context.Context, req *budget.GetBudgetHistoryRequest) (*budget.GetBudgetHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudgetHistory", ctx, req)
	ret0, _ := ret[0].(*budget.GetBudgetHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudgetHistory indicates an expected call of GetBudgetHistory.
func (mr *MockBudgetMockRecorder) GetBudgetHistory(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudgetHistory", reflect.TypeOf((*MockBudget)(nil).GetBudgetHistory), ctx, req)
}

// GetByUserID mocks base method.
func (m *MockBudget) GetByUserID(ctx context.Context, req *budget.GetBudgetByIDRequest) (*budget.GetBudgetByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, req)
	ret0, _ := ret[0].(*budget.GetBudgetByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockBudgetMockRecorder) GetByUserID(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockBudget)(nil).GetByUserID), ctx, req)
}

// GetCurrentBalance mocks base method.
func (m *MockBudget) GetCurrentBalance(ctx context.Context, req *budget.GetCurrentBalanceRequest) (*budget.GetCurrentBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBalance", ctx, req)
	ret0, _ := ret[0].(*budget.GetCurrentBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentBalance indicates an expected call of GetCurrentBalance.
func (mr *MockBudgetMockRecorder) GetCurrentBalance(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBalance", reflect.TypeOf((*MockBudget)(nil).GetCurrentBalance), ctx, req)
}
