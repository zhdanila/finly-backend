// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/category/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/category/service.go -destination=internal/service/category/mock/mock_category.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	category "finly-backend/internal/service/category"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCategory is a mock of Category interface.
type MockCategory struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryMockRecorder
	isgomock struct{}
}

// MockCategoryMockRecorder is the mock recorder for MockCategory.
type MockCategoryMockRecorder struct {
	mock *MockCategory
}

// NewMockCategory creates a new mock instance.
func NewMockCategory(ctrl *gomock.Controller) *MockCategory {
	mock := &MockCategory{ctrl: ctrl}
	mock.recorder = &MockCategoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategory) EXPECT() *MockCategoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategory) Create(ctx context.Context, req *category.CreateCategoryRequest) (*category.CreateCategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(*category.CreateCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryMockRecorder) Create(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategory)(nil).Create), ctx, req)
}

// Delete mocks base method.
func (m *MockCategory) Delete(ctx context.Context, req *category.DeleteCategoryRequest) (*category.DeleteCategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, req)
	ret0, _ := ret[0].(*category.DeleteCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryMockRecorder) Delete(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategory)(nil).Delete), ctx, req)
}

// GetByID mocks base method.
func (m *MockCategory) GetByID(ctx context.Context, req *category.GetCategoryByIDRequest) (*category.GetCategoryByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, req)
	ret0, _ := ret[0].(*category.GetCategoryByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCategoryMockRecorder) GetByID(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCategory)(nil).GetByID), ctx, req)
}

// List mocks base method.
func (m *MockCategory) List(ctx context.Context, req *category.ListCategoriesRequest) (*category.ListCategoriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, req)
	ret0, _ := ret[0].(*category.ListCategoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCategoryMockRecorder) List(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCategory)(nil).List), ctx, req)
}

// ListCustom mocks base method.
func (m *MockCategory) ListCustom(ctx context.Context, req *category.ListCustomCategoriesRequest) (*category.ListCustomCategoriesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustom", ctx, req)
	ret0, _ := ret[0].(*category.ListCustomCategoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustom indicates an expected call of ListCustom.
func (mr *MockCategoryMockRecorder) ListCustom(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustom", reflect.TypeOf((*MockCategory)(nil).ListCustom), ctx, req)
}
